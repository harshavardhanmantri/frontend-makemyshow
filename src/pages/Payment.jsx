import React, { useEffect, useState } from 'react';
import { useNavigate } from 'react-router-dom';
import { Formik, Form } from 'formik';
import * as Yup from 'yup';
import { FaArrowLeft, FaCreditCard, FaMoneyBillWave, FaWallet } from 'react-icons/fa';
import useBooking from '../hooks/useBooking.js';
import useAuth from '../hooks/useAuth.js';
import LoadingSpinner from '../components/common/LoadingSpinner.jsx';
import PaymentMethods from '../components/payment/PaymentMethods.jsx';
import PaymentForm from '../components/payment/PaymentForm.jsx';
import { processPayment } from '../api/payments.js';
import { createBooking } from '../api/booking.js';
import '../styles/pages/payment.css';

const Payment = () => {
  const navigate = useNavigate();
  const { user } = useAuth();
  const { 
    selectedMovie, 
    selectedShow, 
    selectedSeats, 
    totalAmount, 
    setBookingDetails,
    resetBooking
  } = useBooking();
  
  const [paymentMethod, setPaymentMethod] = useState('CREDIT_CARD');
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState(null);
  
  useEffect(()=>{  if (!selectedMovie || !selectedShow || selectedSeats.length === 0) {
    navigate('/');
    return null;
  }},[])
  // If no selection data, redirect to home

  
  const handlePaymentMethodChange = (method) => {
    setPaymentMethod(method);
  };
  
  const handleSubmit = async (values) => {
    try {
      setLoading(true);
      setError(null);
      
      // First create booking
      const bookingData = {
        showId: selectedShow.id,
        seatIds: selectedSeats.map(seat => seat.id)
      };
      
      const booking = await createBooking(bookingData);
      
      // Then process payment
      const paymentData = {
        bookingId: booking.id,
        paymentMethod: paymentMethod,
        amount: totalAmount + 50, // Add service fee
        transactionId: `TX${Date.now()}` // Usually generated by payment gateway
      };
      
      const payment = await processPayment(paymentData);
      
      // Set booking details in context for confirmation page
      setBookingDetails({
        ...booking,
        payment
      });
      
      // Navigate to confirmation
      navigate(`/confirmation/${booking.id}`);
    } catch (err) {
      setError(err.message || 'Payment failed. Please try again.');
      setLoading(false);
      console.error('Error processing payment:', err);
    }
  };
  
  const goBack = () => {
    navigate(-1);
  };
  
  // Payment validation schema
  const validationSchema = Yup.object().shape({
    cardNumber: Yup.string()
      .when('paymentMethod', {
        is: 'CREDIT_CARD',
        then: Yup.string()
          .required('Card number is required')
          .matches(/^\d{16}$/, 'Card number must be 16 digits')
      }),
    cardName: Yup.string()
      .when('paymentMethod', {
        is: 'CREDIT_CARD',
        then: Yup.string()
          .required('Name on card is required')
      }),
    expiryDate: Yup.string()
      .when('paymentMethod', {
        is: 'CREDIT_CARD',
        then: Yup.string()
          .required('Expiry date is required')
          .matches(/^(0[1-9]|1[0-2])\/\d{2}$/, 'Expiry date must be in MM/YY format')
      }),
    cvv: Yup.string()
      .when('paymentMethod', {
        is: 'CREDIT_CARD',
        then: Yup.string()
          .required('CVV is required')
          .matches(/^\d{3,4}$/, 'CVV must be 3 or 4 digits')
      }),
    upiId: Yup.string()
      .when('paymentMethod', {
        is: 'UPI',
        then: Yup.string()
          .required('UPI ID is required')
          .matches(/^[a-zA-Z0-9._-]+@[a-zA-Z0-9]+$/, 'Enter a valid UPI ID')
      })
  });
  
  if (loading) {
    return <LoadingSpinner />;
  }
  
  return (
    <div className="payment-page">
      <div className="container">
        <div className="payment-header">
          <button className="back-button" onClick={goBack}>
            <FaArrowLeft /> Back
          </button>
          
          <h1>Payment</h1>
        </div>
        
        {error && (
          <div className="payment-error">
            {error}
          </div>
        )}
        
        <div className="payment-container">
          <div className="payment-methods-container">
            <h2>Choose Payment Method</h2>
            
            <PaymentMethods 
              selectedMethod={paymentMethod}
              onMethodChange={handlePaymentMethodChange}
            />
            
            <Formik
              initialValues={{
                paymentMethod,
                cardNumber: '',
                cardName: '',
                expiryDate: '',
                cvv: '',
                upiId: '',
                walletId: ''
              }}
              validationSchema={validationSchema}
              onSubmit={handleSubmit}
              enableReinitialize
            >
              {(formikProps) => (
                <Form className="payment-form">
                  <PaymentForm 
                    paymentMethod={paymentMethod}
                    formikProps={formikProps}
                  />
                  
                  <button 
                    type="submit" 
                    className="btn btn-primary payment-submit-btn"
                    disabled={formikProps.isSubmitting}
                  >
                    Pay ₹{(totalAmount + 50).toFixed(2)}
                  </button>
                </Form>
              )}
            </Formik>
          </div>
          
          <div className="order-summary-container">
            <div className="order-summary">
              <h3>Order Summary</h3>
              
              <div className="movie-info">
                {/* <img 
                  src={selectedMovie.posterUrl || '/assets/images/placeholder.jpg'} 
                  alt={selectedMovie.title} 
                  className="movie-thumbnail"
                />
                 */}
                <div className="movie-details">
                  <h4>{selectedMovie.title}</h4>
                  <p>{selectedMovie.language} • {selectedMovie.genre}</p>
                  <p>{new Date(selectedShow.startTime).toLocaleDateString()} at {new Date(selectedShow.startTime).toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' })}</p>
                  <p>{selectedShow.theater.name}, {selectedShow.screenName}</p>
                </div>
              </div>
              
              <div className="ticket-details">
                <div className="ticket-detail">
                  <span>Tickets</span>
                  <span>{selectedSeats.length}</span>
                </div>
                
                <div className="ticket-detail">
                  <span>Seats</span>
                  <span>{selectedSeats.map(seat => `${seat.row}${seat.number}`).join(', ')}</span>
                </div>
                
                <div className="ticket-detail">
                  <span>Ticket Price</span>
                  <span>₹{totalAmount.toFixed(2)}</span>
                </div>
                
                <div className="ticket-detail">
                  <span>Service Fee</span>
                  <span>₹50.00</span>
                </div>
                
                <div className="total-amount">
                  <span>Total Amount</span>
                  <span>₹{(totalAmount + 50).toFixed(2)}</span>
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
};

export default Payment;